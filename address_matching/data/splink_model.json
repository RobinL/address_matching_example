{
    "probability_two_random_records_match": 0.01,
    "link_type": "link_only",
    "blocking_rules_to_generate_predictions": [
        {
            "blocking_rule": "l.\"postcode\" = r.\"postcode\"",
            "sql_dialect": "duckdb",
            "salting_partitions": 10
        }
    ],
    "comparisons": [
        {
            "output_column_name": "numeric_token_1",
            "comparison_levels": [
                {
                    "sql_condition": "\"numeric_token_1_l\" IS NULL AND \"numeric_token_1_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"numeric_token_1_l\" = \"numeric_token_1_r\"",
                    "label_for_charts": "Exact match",
                    "u_probability": 0.004699480085386481,
                    "tf_adjustment_column": "numeric_token_1",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" = \"numeric_token_1_r\"",
                    "label_for_charts": "Exact match inverted numbers",
                    "u_probability": 0.00032538736711250447
                },
                {
                    "sql_condition": "\"numeric_token_1_l\" IS NULL OR \"numeric_token_1_r\" IS NULL",
                    "label_for_charts": "One null",
                    "m_probability": 0.001,
                    "u_probability": 1.0
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "u_probability": 0.9886356195405691
                }
            ],
            "comparison_description": "numeric_token_1"
        },
        {
            "output_column_name": "numeric_token_2",
            "comparison_levels": [
                {
                    "sql_condition": "\"numeric_token_2_l\" IS NULL AND \"numeric_token_2_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" = \"numeric_token_2_r\"",
                    "label_for_charts": "Exact match",
                    "tf_adjustment_column": "numeric_token_2",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"numeric_token_1_l\" = \"numeric_token_2_r\"",
                    "label_for_charts": "Exact match inverted numbers",
                    "u_probability": 0.0002851051170170567
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" IS NULL OR \"numeric_token_2_r\" IS NULL",
                    "label_for_charts": "One null",
                    "u_probability": 0.9873686037286791
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "u_probability": 0.012346291154303848
                }
            ],
            "comparison_description": "numeric_token_2"
        },
        {
            "output_column_name": "numeric_token_3",
            "comparison_levels": [
                {
                    "sql_condition": "\"numeric_token_3_l\" IS NULL AND \"numeric_token_3_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"numeric_token_3_l\" = \"numeric_token_3_r\"",
                    "label_for_charts": "Exact match",
                    "u_probability": 0.00013007284079084288,
                    "tf_adjustment_column": "numeric_token_3",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"numeric_token_2_l\" = \"numeric_token_3_r\"",
                    "label_for_charts": "Exact match inverted",
                    "u_probability": 0.00026014568158168577,
                    "tf_adjustment_column": "numeric_token_3",
                    "tf_adjustment_weight": 1.0
                },
                {
                    "sql_condition": "\"numeric_token_3_l\" IS NULL OR \"numeric_token_3_r\" IS NULL",
                    "label_for_charts": "One null",
                    "u_probability": 0.9983090530697191
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "u_probability": 0.0013007284079084287
                }
            ],
            "comparison_description": "numeric_token_3"
        },
        {
            "output_column_name": "token_rel_freq_arr",
            "comparison_levels": [
                {
                    "sql_condition": "\"token_rel_freq_arr_l\" IS NULL OR \"token_rel_freq_arr_r\" IS NULL or length(\"token_rel_freq_arr_l\") = 0 or length(\"token_rel_freq_arr_r\") = 0",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    token_rel_freq_arr_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(token_rel_freq_arr_l, x -> x.tok),\n                            list_transform(token_rel_freq_arr_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     *  \n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                    y.tok\n                                )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                    y.tok\n                                )\n                    )\n                ),\n\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    )\n     < 1e-10",
                    "label_for_charts": "<1e-10",
                    "u_probability": 0.0005454181842422626
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    token_rel_freq_arr_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(token_rel_freq_arr_l, x -> x.tok),\n                            list_transform(token_rel_freq_arr_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     *  \n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                    y.tok\n                                )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                    y.tok\n                                )\n                    )\n                ),\n\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    )\n     < 1e-8",
                    "label_for_charts": "<1e-8",
                    "u_probability": 0.0006040001373645797
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    token_rel_freq_arr_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(token_rel_freq_arr_l, x -> x.tok),\n                            list_transform(token_rel_freq_arr_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     *  \n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                    y.tok\n                                )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                    y.tok\n                                )\n                    )\n                ),\n\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    )\n     < 1e-6",
                    "label_for_charts": "<1e-6",
                    "u_probability": 0.0006353111812747837
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    token_rel_freq_arr_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(token_rel_freq_arr_l, x -> x.tok),\n                            list_transform(token_rel_freq_arr_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     *  \n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                    y.tok\n                                )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                    y.tok\n                                )\n                    )\n                ),\n\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    )\n     < 1e-4",
                    "label_for_charts": "<1e-4",
                    "u_probability": 0.001120127345045684
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    token_rel_freq_arr_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(token_rel_freq_arr_l, x -> x.tok),\n                            list_transform(token_rel_freq_arr_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     *  \n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                    y.tok\n                                )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                    y.tok\n                                )\n                    )\n                ),\n\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    )\n     < 1e-2",
                    "label_for_charts": "<1e-2",
                    "u_probability": 0.003889639680586951
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    token_rel_freq_arr_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(token_rel_freq_arr_l, x -> x.tok),\n                            list_transform(token_rel_freq_arr_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     *  \n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                list_concat(\n                    array_filter(\n                        token_rel_freq_arr_l,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_r, x -> x.tok),\n                                    y.tok\n                                )\n                    ),\n                    array_filter(\n                        token_rel_freq_arr_r,\n                            y -> not array_contains(\n                                    list_transform(token_rel_freq_arr_l, x -> x.tok),\n                                    y.tok\n                                )\n                    )\n                ),\n\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p / q^0.33\n    )\n     < 1",
                    "label_for_charts": "<1e-2",
                    "u_probability": 0.007250021715724002
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "u_probability": 0.9859554817557618
                }
            ],
            "comparison_description": "Token relative frequency array"
        },
        {
            "output_column_name": "common_end_tokens",
            "comparison_levels": [
                {
                    "sql_condition": "\"common_end_tokens_l\" IS NULL OR \"common_end_tokens_r\" IS NULL or length(\"common_end_tokens_l\") = 0 or length(\"common_end_tokens_r\") = 0",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    common_end_tokens_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(common_end_tokens_l, x -> x.tok),\n                            list_transform(common_end_tokens_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     < 1e-2",
                    "label_for_charts": "<1e-2",
                    "m_probability": 1.0,
                    "u_probability": 0.2
                },
                {
                    "sql_condition": "\n    list_reduce(\n        list_prepend(\n            1.0,\n            list_transform(\n                array_filter(\n                    common_end_tokens_l,\n                    y -> array_contains(\n                        array_intersect(\n                            list_transform(common_end_tokens_l, x -> x.tok),\n                            list_transform(common_end_tokens_r, x -> x.tok)\n                        ),\n                        y.tok\n                    )\n                ),\n                x -> x.rel_freq\n            )\n        ),\n        (p, q) -> p * q\n    )\n     < 0.5",
                    "label_for_charts": "<1e-2",
                    "m_probability": 1.0,
                    "u_probability": 0.5
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.5,
                    "u_probability": 1.0
                }
            ],
            "comparison_description": "Array intersection"
        },
        {
            "output_column_name": "original_address_concat",
            "comparison_levels": [
                {
                    "sql_condition": "\"original_address_concat_l\" IS NULL OR \"original_address_concat_r\" IS NULL",
                    "label_for_charts": "Null",
                    "is_null_level": true
                },
                {
                    "sql_condition": "\"original_address_concat_l\" = \"original_address_concat_r\"",
                    "label_for_charts": "Exact match",
                    "m_probability": 0.5,
                    "u_probability": 0.5
                },
                {
                    "sql_condition": "ELSE",
                    "label_for_charts": "All other comparisons",
                    "m_probability": 0.5,
                    "u_probability": 0.5
                }
            ],
            "comparison_description": "Exact match vs. anything else"
        }
    ],
    "retain_intermediate_calculation_columns": true,
    "source_dataset_column_name": "source_dataset",
    "additional_columns_to_retain": [
        "postcode"
    ],
    "sql_dialect": "duckdb",
    "linker_uid": "gidd23y3"
}